services:
  # Reverse Proxy (Traefik)
  traefik:
    image: traefik:v2.10
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=test@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"

    ports:
      - "80:80"
      - "443:443"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certificates:/letsencrypt
    networks:
      - app-network
    
  # Database Admin UI (Adminer)
  adminer:
    image: adminer:latest
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=Host(`adminer.dojo-task.com`)"
      - "traefik.http.routers.adminer.entrypoints=websecure"
      - "traefik.http.routers.adminer.tls=true"
      - "traefik.http.routers.adminer.tls.certresolver=myresolver"
    depends_on:
      - db
    networks:
      - app-network

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - ./frontend/.env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`dojo-task.com`, `www.dojo-task.com`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.routers.frontend.service=frontend"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    depends_on:
      - backend
    networks:
      - app-network

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/.env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend-api.rule=Host(`dojo-task.com`, `www.dojo-task.com`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend-api.entrypoints=websecure"
      - "traefik.http.routers.backend-api.tls=true"
      - "traefik.http.routers.backend-api.tls.certresolver=myresolver"
      - "traefik.http.routers.backend-api.service=backend-api"
      - "traefik.http.services.backend-api.loadbalancer.server.port=8000"
      # - "traefik.http.middlewares.api-stripprefix.stripprefix.prefixes=/api"
      # - "traefik.http.routers.backend-api.middlewares=api-stripprefix"

      - "traefik.http.routers.backend-docs.rule=Host(`dojo-task.com`, `www.dojo-task.com`) && PathPrefix(`/docs`)"
      - "traefik.http.routers.backend-docs.entrypoints=websecure"
      - "traefik.http.routers.backend-docs.tls=true"
      - "traefik.http.routers.backend-docs.tls.certresolver=myresolver"
      - "traefik.http.routers.backend-docs.service=backend-docs"
      - "traefik.http.services.backend-docs.loadbalancer.server.port=8000"
      # - "traefik.http.middlewares.docs-stripprefix.stripprefix.prefixes=/docs"
      # - "traefik.http.routers.backend-docs.middlewares=docs-stripprefix"
      
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  db:
    image: postgres:latest
    env_file:
      - ./backend/.env
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d app"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    
networks:
  app-network:
    driver: bridge
  

volumes:
  db_data:
    driver: local
  traefik-certificates:
    driver: local